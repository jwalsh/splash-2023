

In this paper, Schoepe et al. present an approach to lifting on-demand static analyses to higher-order languages, which allows for precise interprocedural reasoning and on-demand techniques. The approach starts from an empty call graph and proceeds by interleaving backward and forward data flow queries, which allows for a sound overapproximation of a relevant part of the call graph. The authors propose a language-agnostic construction for bootstrapping an on-demand call graph, formalize the approach as an abstract domain combinator, and evaluate a prototype implementation for a subset of JavaScript. They illustrate the main ideas on a small JavaScript example program, which shows how callbacks complicate the control-flow of programs and can lead to unintended behavior. The authors demonstrate how their technique can detect such leaks by constructing a call graph and issuing a backward data flow query.

The paper then outlines an algorithm for answering forward queries about calls to a function f, which starts by finding syntactic references to f in the code and following the flow of f forwards from those points. It then issues a query to resolve call targets of the call to process on line 13. The paper also discusses the transition system used to construct an on-demand call graph, which is non-deterministic and composed of five rules. The authors prove soundness of the approach by stating that once the algorithm reaches a fixed point, the call graph is on-demand sound with respect to the answered queries.

The paper then provides a formal definition of the language of events used to model program semantics, and introduces two kinds of call graph queries (callee query and caller query). It also discusses the motivation for the authors' work and compares it to other approaches, and mentions that the authors' approach is inspired by Datalog-based analyses. The section then concludes with a discussion of the authors' prototype Merlin, which is evaluated on a synthetic benchmark set.

Finally, the paper provides a formal proof of the soundness of the on-demand call graph construction algorithm. It introduces a formal, semantic model of programs, call graphs and queries, and defines the desired property of on-demand call graph soundness. It then introduces the algorithm in the form of a transition system defined by a set of inference rules, and states the soundness result that call graphs generated by the rules for a given input program and set of input queries are on-demand sound. The full proof has been formalized using Isabelle/HOL and is available online.
