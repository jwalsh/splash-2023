

This paper discusses the language design of LiveQL, a programming language that enables forward references and allows changes to running forms. It introduces Cascade, a meta-language for expressing Domain-Specific Languages (DSLs) with interface- and feedback-mechanisms that drive live programming. Cascade supports the base types String, int, bool, and enum, and the composite types List, Set and Map. It also supports three kinds of parameterized event declarations, called effect, trigger and signal. Objects have a limited life span and events work on object life-lines. The basic unit of change, called effect, offers a parameterized abstraction for scripting and reuse. Delta, a runtime system used by Cascade, supports operations on objects, lists, sets, and maps. The Questionnaire Language (QL) is a DSL for expressing interactive questionnaires, and Live State Machine Language (LiveSML) is an illustrative example of a DSL for simultaneously creating and running state machines. The Micro-Machinations (MM) library (MM-Lib) is a meta-modeling approach that leverages an explicit representation of change. Finally, the paper discusses the use of Cascade to add liveness to GPLs (general purpose languages).
