

This paper discusses the semantic dispatch that must be emulated in order to optimize message dispatch in object-oriented programming. It describes the steps of Smalltalk message dispatch, the optimizations used by most Smalltalk implementations, the model used by Java to achieve excellent performance, a theoretically optimal dispatch respecting Smalltalk semantics, and the flat dispatch model proposed in this paper. The proposed flat dispatch model involves creating unified mappings for all classes so that all methods can be looked up by simple indexing into the vtable, reducing the overhead of dispatch to a very low level. The paper also discusses the performance of the fibonacci micro-benchmark when using different execution models, and outlines a three-step process for calling a selector symbol. Finally, the paper discusses how the compiler recognizes certain messages such as ifTrue:, ifTrue:ifFalse: and whileTrue: and turns them into conditional byte code sequences with the closures inlined.
