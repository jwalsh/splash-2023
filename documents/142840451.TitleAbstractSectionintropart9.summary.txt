

This section discusses the implementation of the on-demand call graph construction algorithm in a prototype called Merlin for a limited subset of JavaScript. It also evaluates the scalability of the algorithm by running experiments on a set of synthetic benchmarks. The implementation uses the TAJS intermediate representation and Synchronized Push-Down Systems (SPDS) as the underlying data flow analysis for both forward and backward queries. It also adds backward and forward flow functions on top of an existing language-agnostic SPDS implementation. The asynchronous saturation process is implemented using a reactive programming approach and the Java Virtual Machineâ€™s ForkJoinPool to resolve queries concurrently. The experiments evaluate how many queries are resolved in total, for initial sets of various sizes, and report on the potential time savings from on-demand analysis.