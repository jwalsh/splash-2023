

This section introduces compositional approaches to linearizability, which are used to prove the correctness of concurrent algorithms and data structures. These approaches include contextual reﬁnement and logical atomicity, which are both available in the Iris framework for separation logic in Coq. Recent work by Mulder et al. provides a starting point for proof automation in Iris. Contextual reﬁnement was pioneered by Turon et al. and incorporated into Iris by Krebbers et al., while logical atomicity was pioneered in the TaDA logic by da Rocha Pinto et al. and extended in Iris by Jung et al. Examples of these approaches include the Michael-Scott queue, a queue from Meta’s Folly library, the Herlihy-Wing queue, RDCSS, and a high-performance queue. GoJournal uses logical atomicity in Iris to verify a concurrent, crash-safe journaling system. The state of the art for compositional approaches to linearizability is proof automation, which is still lacking.