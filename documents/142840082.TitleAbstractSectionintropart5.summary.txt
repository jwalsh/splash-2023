

This section introduces the syntax and semantics of a toy language used to encode the integer arithmetic restriction of real-life programming languages like C. The syntax of the language includes variables, constant intervals, classical arithmetic operations, modulo within a constant modular ring, and bound checks. The concrete semantics of the language is a mathematical expression of its behaviors, which maps a memory state to sets of values and errors. The set of possible errors includes division by zero and bound check failure. The evaluation of a variable fetches the value from the memory state, while the evaluation of an interval constant returns a set of values between the given bounds. The evaluation of other expressions, such as arithmetic operations, convex join operators, and bound checks, may induce non-determinism and track erroneous computations.