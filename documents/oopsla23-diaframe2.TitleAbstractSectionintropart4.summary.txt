

This section describes the implementation of Diaframe 2.0, a proof automation system for linearizability in separation logic. The architecture of Diaframe 2.0 is outlined, and the key ingredients are the proof strategies underpinning the reﬁnement and logical atomicity modules. These strategies are designed to be deterministic and minimal in their use of backtracking, and are proved sound in Coq. To express the proof search strategies in a declarative manner, two general formats for rules are identified. Abduction and transformer hints are used to replace a program specification goal with a successive goal, and type classes in Coq are used to represent these hints. The modules for the strategies are given as collections of type class instances, and the proof automation is implemented as an Ltac tactic. The contributions of the section are outlined, including the proof automation strategies for reﬁnements in ReLoC and logically atomic triples in Iris.