

This section discusses the use of Cascade to add liveness to GPLs (general purpose languages). Cascade is a generic REPL (read-eval-print-loop) with limitations, and lacks a debugger for exploring histories, inspecting cause-and-effect chains, and tracing source locations. To demonstrate the behavior of MM (a mechanism), a prototype was created using Vie, a tiny live game engine. This prototype was used to perform a sequence of prototyping and playtesting actions, including live desugaring and run-time state migrations. The lack of a formal semantics complicates analyses, and an open challenge is identifying formal properties of liveness. The section then discusses related work, including live programming, interpreters with REPLs, omniscient debugging, model transformations, and bi-directional model transformation.