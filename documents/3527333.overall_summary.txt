

This paper introduces SDQL, a functional collection programming language with semi-ring dictionaries. It is designed to be expressive enough for different data science use-cases with a better or competitive performance relative to specialized systems. It unifies a wide range of optimizations commonly used in databases and linear algebra, enabling efficient processing of hybrid DB and LA workloads. The language is statically typed and provides a kind and type system that keeps track of the semi-ring structure. It also provides a unified formal model that allows tighter integration of data science pipelines. The paper presents a prototype compiler and runtime for SDQL, and shows experimentally that SDQL can be competitive with or outperforms a host of systems that are state-of-the-art in their own domain. It also introduces language extensions for SDQL, which enable further optimizations, and discusses the design decisions behind SDQL that enable the optimizations presented in the paper. Finally, it provides examples of how to evaluate vector and matrix operations in SDQL, and explains the denotational semantics of the language.
