

This section introduces a generic framework for the symbolic transformation of expressions in modular arithmetic. It provides more explicit definitions for the Î¸ primitive and reduces primitive of the parametric abstraction. The other components are supposed to be defined in an underlying domain. It then introduces an intervalization heuristic which attempts to simplify abstract expressions without concealing potential error alarms. The purpose of this function is to achieve maximum expression canonization by using linear forms whenever possible. It then introduces a reduce implementation, denoted as reduce0, that is a set of inference rules. Their premises are mutually exclusive, except for the NoReduce rule that is used only when no other rule can be applied. Lastly, it discusses the possibility of using more precise abstract domains such as the difference bound matrices domain and the octagon domain to represent relations between variables, which can be necessary to simplify modulo computations.