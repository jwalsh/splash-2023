

This section discusses the Cascade language, which is designed to express run-time transformations with explicit effects. It supports the base types String, int, bool, and enum, and the composite types List, Set and Map. It also has three kinds of parameterized event declarations, called effect, trigger and signal. Objects have a limited life span and events work on object life-lines. The basic unit of change, called effect, offers a parameterized abstraction for scripting and reuse. Creation effects are used to create new objects of a certain class. The first parameter of an effect, called subject, is always a reference to the object that is subject to change. There are two kinds of additional parameters that may follow the subject in the signature. The pre and post clauses enable scheduling effects before and after an event. The begin and end statements issue objects references and revoke their validity. Inverse effects, indicated by the inverse keyword, perform conceptually opposite operations to their preceding effects.