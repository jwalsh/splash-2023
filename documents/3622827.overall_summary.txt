

This paper discusses the use of hazard pointers and RCU (Read-Copy-Update) to verify concurrent data structures with manual memory reclamation. The authors compare the lines of code and proof for implementation and proof for logical atomicity of concurrent data structures with and without reclamation. The results show that the total code overhead of applying hazard pointers and RCU is 35.4% and 24.5%, respectively, and the total proof overhead of applying hazard pointers and RCU is 25.3%.4%, respectively. The authors also note that the additional proofs for hazard pointers and RCU are similar, and that the Harris-Michael list with hazard pointers exhibits significantly smaller proof overhead because of the simplification of the reasoning related to prophecy variables. 

The paper then introduces two predicates, Managed and Protected, which replace leaking points-to assertions. The Managed pointer predicate of the form Managed(ℓ, ) represents the ownership of the pointer ℓ managed by hazard pointers. The Protected predicate represents the temporary grant of access permission to protected pointers. The paper also presents a traversal-friendly specification for RCU which is built on top of the base specification and directly captures the traversal loop invariant. 

The paper then discusses the problem of non-modular verification of memory reclamation in concurrent data structures and reviews existing verification efforts such as Gotsman et al. [2013], Tassarotti [2015], and Wolff [2018]. It then introduces a method for formal verification of concurrent data structures, which is designed to increase confidence in the correctness of the algorithm and help improve it. The authors propose modular specifications of hazard pointers and RCU, and formally verify realistic implementations of them in concurrent separation logic. They demonstrate that the specifications facilitate modular verification in three criteria: compositional verification, general applicability, and easy integration. 

Finally, the paper discusses how to modify the specification to enable verification of sophisticated data structures with mutable memory blocks. It introduces block resource predicates and parameters to Managed and Protected predicates, which depend on the block's address, contents, and block ID. It also introduces new proof rules, such as Managed-New-Full, HPSlot-Validate-Full, Protected-Access-Full, and Protected-Managed-Agree-Full. The paper provides an example of how the updated specification can be used to verify the Harris-Michael list with manual reclamation.
