

This section discusses the optimal dispatch for Smalltalk, which would involve creating unified mappings for all classes so that all methods could be looked up by simple indexing into the vtable. This would reduce the overhead of dispatch to a very low level, but would require hundreds of megabytes of dispatch table. The goal is to inline everything possible and minimize dynamic dispatches, and to make the inlining principle-based rather than based on heuristics of appropriate selectors. The new dispatch involves having a single flat dispatch table for each class, which includes not just the methods of the class, but also all the inherited methods that have been invoked. The dispatch table is built using a mod function to calculate the remainder of the symbolâ€™s hash value modulo the size of the table, which is then multiplied by the size of the table and shifted right 32 bits. The dispatch involves several steps, including extracting the class number from the target object, indexing into a static table of pointers to class dispatch objects, extracting the hash value from the message selector, and indexing into the array of code pointers.