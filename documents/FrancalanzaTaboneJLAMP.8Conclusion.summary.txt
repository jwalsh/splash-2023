

In this work, a correspondence was established between the ElixirST type system and the runtime behaviour of a client handler running an Elixir module function that has been type-checked with its session type protocol. It was shown that this session-based type system observes the standard session fidelity property, meaning that processes executing a typed function always follow their ascribed protocols at runtime. This provides the necessary underlying guarantees to attain various forms of communication safety. For future work, avenues to pursue include augmenting protocols that talk about multiple entry points to a module, multiparty session types, process/session type extensions that account for failure, resource usage and cost, and integrating expression typechecking mechanisms.