

This section discusses the validation of the ElixirST Type System by establishing a relation with the runtime behaviour of a typechecked Elixir program. It introduces the concept of type preservation, which states that if a well-typed term transitions, the resulting term then remains well-typed. It also introduces the concept of session fidelity, which ensures that the communication action produced as a result of the execution of the typed process is one of the actions allowed by the current stage of the protocol, and that the resultant process following the transition is still well-typed with respect to the remaining part of the protocol that is still outstanding. The section also introduces the after function, which takes a session type and an action as arguments and returns another session type as a result. It then presents the Session Fidelity Theorem, which states that if a closed term t is well-typed and transitions to a new term t' with action Î±, then the new term t' is expected to remain well-typed. Finally, the section provides an example of a function called client/1 which sends a stop label and awaits a reply with the total value, and shows how the Session Fidelity Theorem applies to it.