

This section introduces a type checker called ElixirST, which assists in the construction of Elixir modules following the service handler design pattern. ElixirST allows module designers to formalise the session endpoint protocol as a session type and ascribe it to a public function, and it statically verifies whether the body of a function respects the ascribed session type protocol specification. The type-checker analyses one side of an interaction, i.e., the module side, without requiring access to the code invoking the module public functions. This paper presents the underlying type system, discusses its implementation details, and validates the type system by formalising the runtime semantics of the Elixir language fragment supported by ElixirST as a labelled transition system. The paper also proves a conditional form of the session fidelity and progress properties for the ElixirST type system. The code for the type-checker is available at a given URL.