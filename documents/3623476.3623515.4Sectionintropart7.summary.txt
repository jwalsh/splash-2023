

This section discusses the design of the Micro-Machinations (MM) library (MM-Lib) and how Cascade helps to express the liveness of MM's core language features, focusing on live desugaring of converters. It explains how MM programs are directed graphs that control the internal economy of running digital games, and how converters can be rewritten as a combination of a drain, a trigger, and a source. It then examines the static and run-time meta-models of MM, and how Cascade can be used to express the dependencies between the abstract syntax and the run-time state. It also discusses how Cascade can be used to add traceability of cause-and-effect for all changes, and to express the effects of resource triggers as a fixed-point computation. Finally, it looks at how the proposed combination of transformations, migrators, and feedback mechanisms can be generalized beyond Cascade, and how the compiler targets C#.