

This section describes the Elixir syntax and type system. Modules are defined by their name and contain two sets of public and private functions, declared as sequences. Public functions are defined by the def keyword and can be called from any module, while private functions can only be called from within the defining module. Functions are parametrised by a sequence of distinct variables and their arity is the length of the sequence. Type annotations are used to assign function parameters and return values, and public functions are decorated with session types to describe their side-effect protocol. The body of a function consists of a term which can take the form of an expression, a let statement, a send or receive construct, a case statement or a function call. The variable binding environment maps data variables to basic types, the session typing environment maps function names and arity pairs to their session type, and the function information environment holds information related to the function definitions.