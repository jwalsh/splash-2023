

This section explains how Iris uses logically atomic triples to prove weakest preconditions. Logically atomic triples are expressed as ⟨®. ⟩  ⟨. ⟩ E, which states that for any postcondition Φ, to prove wp  {Φ} it is enough to show an atomic update of the form ⟨®.  | .  ⇛ Φ ⟩⊤\E. Atomic updates provide temporary access to  and eventually get Φ. To prove a logically atomic triple, one must prove a weakest precondition, i.e., a goal Δ ⊢ wp  {Φ}. To do this, one must use the atomic update ⟨®.  | .  ⇛ ⟩ E and access it as |⇛E. To make a logically atomic triple persistent, one has to add the persistence modality explicitly. To prove a logically atomic triple, one must use Löb induction on weakest preconditions and the rules unfold-rec and rec-apply. With a proof of a logically atomic triple at hand, clients can use a combination of la-hoare, la-inv and related rules to open invariants around the expression. Alternatively, one can prove an atomic update instead of a logically atomic triple, which can be introduced as au-intro.