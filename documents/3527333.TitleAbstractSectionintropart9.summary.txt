

This section discusses loop optimizations of SDQL, a functional collection programming language. It presents transformation rules for loop optimizations such as vertical loop fusion, horizontal loop fusion, loop factorization, loop-invariant code motion, and loop memoization. Vertical loop fusion is an essential optimization for collection programs which can remove an unnecessary intermediate collection in a vertical pipeline of operators. Horizontal loop fusion is similar to vertical loop fusion, but it fuses two loops horizontally. Loop factorization is a technique to factorize a loop expression into two separate loops. Loop-invariant code motion is a technique to move loop-invariant code outside of the loop. Loop memoization is a technique to cache the results of a loop and reuse them. These techniques can improve the performance of SDQL programs.