Title-Abstract. Section intro
��E3

′ and residue  such that ∀®.  ∗  ⊢
Δ \  ⊢

|⇛E1

E3 ∃®. ′ ∗ (∀®.  −∗  ′), which also ﬁts our grammar.

(5)  = T. Try the following, in order:

(a) Find  ∈ Δ and T ′ such that , T →∼hyp [T ′]. Continue with goal Δ \  ⊢ T ′.
(b) Otherwise, ﬁnd  ′ such that Δ, T →∼ctx [ ′]. Continue with goal Δ ⊢  ′.

Diaframe 1.0 vs Diaframe 2.0. There are two main reasons why Diaframe 1.0’s bi-abduction
hints cannot express the proof search strategies from § 2.3 and 3.3. Firstly, context transformer
hints (Item 5b) have a shape that is simply incompatible with Item 4b. Secondly, the side-conditions
of abduction hints are in , while those of bi-abduction hints are in . Goals  are strictly more
ﬂexible than left-goals , giving abduction hints the additional power to express proof strategies
for program speciﬁcation styles. One could attempt to extend the grammar of , but then we risk
ending up in a goal of shape (∀. 1) ∗ (∀. 2) after Item 4b, causing the proof search to get stuck.

5 EVALUATION

We evaluate our proof automation on four sets of benchmarks. To evaluate Design goal # 1, we
compare to Voila [Wolf et al. 2021]—a proof outline checker for logical atomicity (§5.1). We discuss
the diﬀerences in the underpinned logics, and the performance and proof burden of the proof
automation of both tools. To evaluate Design goal #2, we redo some of the trickier examples in the
Iris literature: an elimination stack, and Harris et al. [2002]’s RDCSS (restricted double-compare
single-swap) (§ 5.2). Besides reverifying existing examples, we use our results to verify logical
atomicity of the Michael-Scott queue [Michael and Scott 1996] (§5.3). This queue is known to be
linearizable, but we are not aware of a mechanized proof of logical atomicity. For reﬁnements in
concurrent separation logic there exist—to the best of our knowledge—no existing semi-automated
tools. We thus compare to existing interactive proofs done in ReLoC (§5.4).

Proc. ACM Program. Lang., Vol. 7, No. OOPSLA1, Article 91. Publication date: April 2023.


Proof Automation for Linearizability in Separation Logic

91:23

Table 1. Data on examples with logical atomicity, in comparison with Voila. Rows correspond to files in the
supplementary artifact [Mulder and Krebbers 2023]. Columns contain information on lines of implementation,
total amount of lines, average verification time in minutes, and lines of proof burden, also for Voila.

name
bag stack
bounded counter
cas counter
fork join
fork join client
inc dec counter
spin lock
ticket lock
ticket lock client
total

impl
30
20
20
14
13
22
13
17
7
156

total
142
61
46
43
46
52
56
74
29
549

53
6
0
0
0
0
0
4
0
63

time proof Voila total Voila proof
1:13
0:32
0:24
0:21
0:20
0:31
0:16
1:12
0:39
5:28

220
86
98
64
134
111
71
112
91
987

74
19
24
17
35
26
17
27
17
246

5.1 Comparison to Logical Atomicity Proofs in Voila

We verify the 9 examples from Voila’s evaluation suite in Diaframe 2.0. Details can be found in
Table 1. There are some diﬀerences between Voila and Diaframe 2.0 that are important to point
out. Voila is based on the TaDa logic [da Rocha Pinto 2016; da Rocha Pinto et al. 2014], whose
notion of logical atomicity inspired that of Iris, but is slightly diﬀerent. To give a speciﬁcation for
a logically atomic triple in TaDa, one needs to deﬁne an abstraction around the resources, in the
form of a region (akin to an invariant in Iris). This is not always required in Iris, which makes our
speciﬁcations of e.g., cas counter and inc dec counter a lot shorter.

Another diﬀerence is that Diaframe 2.0 is foundational (built in a proof assistant), while Voila is
nonational. The main diﬀerence between foundational and non-foundational veriﬁcation
lies in the size of the Trusted Computing Base (TCB). Non-foundational tools typically have a large
TCB, which may include external solvers, the bespoke program logic that underpins the tool, and
the implementation of the proof automation. Foundational tools typically have a small TCB: just
the deﬁ of the operational semantics and the kernel of the proof assistant. The program logic
and the proof automation need not be trusted.

Finally, Voila is a proof outline checker, requiring the user to specify key steps in the proof of a
logically atomic triple. In particular, one needs to specify when regions or atomic speci�ations
need to be used, and when the linearization point happens. This oﬀers an improvement over fully
interactive proofs, but does not achieve the degree of automation Diaframe 2.0 provides—for all but
2 examples can � the linearization point automatically. Wolf et al. [2021] explicitly do not
attempt to build an automated veriﬁer foricity, about which they remark:

Automated veriﬁers, on the other hand, signiﬁcantly reduce the proof eﬀort,
but compromise on expressiveness and require substantial development eﬀort,
especially, to devise custom proof search algorithms. It is in principle possible
to increase the automation of proof checkers by developing proof tactics, or to
incre expressiveness of automated ver��ers by developing stronger custom
proof search algorithms. However, such developments are too costly for the
vast majority of program logics, which a scientiﬁc or educational
purpose.

We summarize aggregated data from Table 1. On average, Diaframe 2.0 has ca. 0.4 lines of proof
burden per line of implementation (63 lines of proof burden on 156 lines of implementation), while

Proc. ACM Program. Lang., Vol. 7, No. OOPSLA1, Article 91. Publication date: April 2023.


24

Ike Mulder and Robbert Krebbers

. Data on examples with logical atomicity, in comparison with Iris Proof Mode (IPM) proofs.

name
rdcss
elimination stack
msc queue

impl
50
50
51

total
422
239
427

time proof
63
6:42
58
4:56
8:30
168

IPM total

IPM proof

689
375

294
180

Voila has, in our count, 1.7 lines of proof burden per line of implementation.5 The total proof
burden over these 9 examples is reduced by a factor of about 4, from 246 lines in Voila to 63 lines in
Diaframe 2.0. For 6 out of the 9 examples, the logically atomic triples can be veriﬁed by Diaframe
2.0 without any help from the user. This shows we achieve Design goal #1—full automation for
‘simple’ proofs of logical atomicity. The other three examples require some help for arithmetic
modulo  (bounded counter), case distinctions which need to be performed at a speci�c place in
the proof (ticket lock and bag stack), or custom hints with non-automatable proofs (bag stack).

5.2 Comparison to