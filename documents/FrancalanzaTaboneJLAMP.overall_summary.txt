

This paper introduces ElixirST, a session-based type system for Elixir modules. It is designed to statically determine whether functions in an Elixir module adhere to their endpoint specifications, which are expressed as session types. The type system is based on the Actor Model and Session Types, which describe computation as a group of concurrent processes that interact exclusively via asynchronous messages. The type system is implemented as a tool to automate the typechecking process, and it is integrated into Elixir with minimal changes to the syntax of the surface language. The paper also provides a formal validation of the type system, an LTS-based operational semantics for the language fragment supported by the type system, and a proof of session fidelity and progress for ElixirST. The type system is composed of two sets of public and private functions, declared as sequences. Public functions are defined by the def keyword and can be called from any module, while private functions can only be called from within the defining module. Type annotations are used to assign function parameters and return values, and public functions are decorated with session types to describe their side-effect protocol. The body of a function consists of a term which can take the form of an expression, a let statement, a send or receive construct, a case statement or a function call. The type system is used to statically analyse an Elixir module containing two public functions, server and client, annotated with the session types, counter and counter, respectively defined in eqs. (1) and (2). The type system is also used to verify an Elixir (CLI) application which interacts with a third-party service (Duffel). The progress property of ElixirST states that a well-typed process can always transition from one form to another, and this is checked using the after function. The code for the type-checker is available at a given URL.
