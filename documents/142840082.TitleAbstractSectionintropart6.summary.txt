

This section introduces the concrete semantics of statements, which is defined by induction over the Fig. 7. The operator⨆refers to the iteration of the binary associative and commutative operator⊔ over the set given as an argument. It is equipped with the component-wise join⊔ and order⊑. The concrete semantics of a statement,⦃ stmt⦄∶𝒟→𝒟, maps each element of the semantics domain𝜌∈𝒟 to another one. Additionally, the result of every division between two integers is truncated, that is rounded towards zero raising the error𝜔𝑑 when the denominator can take the value0. The convex join operator⋓ outputs any value between the potential values of its operands and propagates errors while raising the error𝜔𝑜 when they do not fit in the interval given as an argument. It is worth to note that division by0 and overflows are handled differently: executions that perform divisions by0 are halted (they produce no memory states), whereas those that cause overflows are continued without modifying the current value. 

The section also introduces a rewriting order over expressions, noted≼, and parameterized by a set of error alarms. Rewriting an expression may rely on some conditions about the current state of the system. Additionally, it can simplify some parts of the initial expression, which could potentially raise some error alarms. The set of these error alarms are reported as side-conditions.