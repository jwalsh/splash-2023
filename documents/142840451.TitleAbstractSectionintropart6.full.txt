Title-Abstract. Section intro
. Instead, we model analyses directly in terms of the (semi-concrete)
call-trace semantics. In practice, one does need an abstract domain, and the
underlying analysis would typically provide one (e.g., we use SPDS in our proto-
type implementation). For the purpose of our soundness proof, however, we are
primarily interested in the concretization of abstract states back into the con-
crete call-trace semantics. In our formalization, we therefore skip the indirection
through an abstract domain and directly express the analyses as producing sets
of concrete traces, while implementations—such as our prototype—use abstract
representations that can be queried for various properties that we extract from
traces directly in the formal model.

3.1 Program Semantics

Fig. 5 defines the language of events
in terms of a given set of expres-
sions and functions. In addition, we
assume a set of unique syntactic refer-
ence points where an initial reference
to a function is obtained in the pro-
gram.

call sites c ∈ CallSite
functions f ∈ Func
reference points r ∈ RefPoint
events e ∈ Event

::= call(c, f, r )
|
enter(c, f )
|
exit(c, f )
|
return(c, f )
|
ref (f, r )

traces τ ∈ Event∗ = Trace

Events. Let CallSite be the finite set
of call sites and Func the finite set
of function definitions appearing in
some program. Let RefPoint be a fi-
nite set of reference points containing unique identifiers r used to link function
calls to locations where functions are referenced in the source code. To make
our approach applicable to a wide range of languages, regardless of their mem-
ory model and other features, we model only the language semantics relevant to
defining a call graph. To do so, we fix a set Event of events, where each event
e ∈ Event is one of the following:

Fig. 5. Syntax of traces and events

– call(c, f, r ): A call to function f from call site c, where the reference to f

was obtained by the reference point r.
 enter(c, f ): Entering the body of callee f, whose call originated from call site c.


10

Schoepe et al.

1
2
3
4
5

function f () {

return ;

}
var x = f;
x () ;

// enter(x(), f )
// exit(x(), f )

// ref (f, r )
// call(x(), f, r ), return(x(), f )

Fig. 6. An example program annotated with the events it creates.

– exit(c, f ): Exiting the body of callee f, whose call originated from call site c.
– return(c, f ): Returning to a call site of function f, whose call originated

from call site c.

– ref (f, r ): Obtaining a reference to function f with reference point r. This
can be either a syntactic reference to f or a use of reflection evaluating to f.

When a function is called, a call event is first emitted on the caller side, then
an enter event is emitted on the callee side. Similarly, when the called function
returns, an exit event is first created on the callee side, and then a return event
is created on the caller side. Observe that both the ref event and the call event
contain the reference point r. As we will see in Section 3.4, this allows linking
the call to a specific reference to the callee that triggered the call. An example
program and the created events can be seen in Fig. 6.
Traces and Programs. A (call) trace τ ∈ Trace is a finite sequence of events. We
denote by |τ| ∈ N the length of τ and by τi its i-th element, where 0 < i ≤ |τ|.
Given a pair of traces τ, τ′, we denote their concatenation by τ · τ′. We denote
by e1 ··· en the trace consisting of the events e1,..., en.
In the following, we fix a program and model its semantics as the (potentially
infinite) set of call traces its executions may result in, written S ∈ P(Trace).
We impose a few restrictions on S to exclude ill-formed traces that could not
be generated by a real program: we assume that events on the caller side are
followed by corresponding events on the callee side and vice versa, and that each
call to a function f is preceded by obtaining a reference to f. Formally:
– S is prefix-closed, that is, for every trace τ · τ′ ∈ S, the prefix τ is also in S.
– For each trace τ ∈ S:
• If τi = enter(c, f ), then i > 1 and τi−1 = call(c, f, r ) for r ∈ RefPoint.
• If τi = call( f, r ) and i + 1 ≤ |τ|, then τi+1 = enter(c, f ).
 τ = τ′ · call(c, f, r ), then τ · enter(c, f ) ∈ S.
• If τi = exit(c, f ), then ∃ j ∈ N, with 0 < j < i where τj = enter(c, f )
• If τi = return(c, f ), then i > 1 and τi−1 = exit(c, f ).
• If τi = exit(c, f ) and i + 1 ≤ |τ|, then τi+1 = return(c, f ).
• If τi = call(c, f, r ), then ∃ j ∈ N, with 0 < j < i, such that τj = ref (f, r ).

3.2 Queries
A client analysis is an analysis that uses a call graph in order to reason about
interprocedural control flow in a program. We distinguish two kinds of call graph
queries that a client analysis can issue:


Lifting On-Demand Analysis to Higher-Order Languages

11

1. callee query, i.e., a call site c ∈ CallSite, whose purpose is to find all func-
2. caller query, i.e., a function f ∈ Func, whose purpose is to find all call sites

tions f ∈ Func that may have be called at c.
c ∈ CallSite from which the function f may be called.
Intuitively, callee queries are backward data flow queries: given a call site c,
we want to find all the reference points in the program before c from which
function values can flow to c. Conversely, caller queries are forward data flow
queries: given a function f, we want to find all the reference points in the program
from which f can flow to call sites later on in the program.

In each case, the query implicitly defines a subset of program subtraces con-
taining the reference points of interest. Intuitively, these are the parts of program
runs relevant to answering a query. Formally, we first define complete backward
subtraces with both start and end points and then close the resulting set of sub-
traces under suffix: complete-bwd -traces(c) = {τ | ∃τ0.τ0 · τ ∈ S ∧ τ = ref (f, r )·
_· call(c, f, r )} and bwd -traces(c