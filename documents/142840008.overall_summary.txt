

This paper discusses the role of safety norms in the development and verification of safety-critical systems, and the use of the Abstract Interpretation (aiT) tool in industry and academia. It provides an overview of the development and commercialization of two industry-strength Abstract Interpretation-based static analyzers, aiT WCET Analy Astrée, and the lessons learned from this process. It also explains how Astrée has been extended to support code guideline checking, cybersecurity vulnerability scanning, data and control flow analysis, C++, precision and efficiency, and user perspective. Finally, it discusses the improvements made to the Micro-architectural analysis tool developed by D. Kästner et al. for Airbus, and the development of Astrée, a static analyzer for real-time embedded software written in C.

Safety norms are essential for the development and verification of safety-critical systems, as they define the minimal requirements for developers to make sure that unreasonable safety risks are avoided. The DO-178C and ISO 26262 standards provide guidance on the use of formal methods to complement or replace dynamic testing, while the EN 50128 and IEC 62304 standards lack an explicit reference to Abstract Interpretation.

Abstract Interpretation (aiT) has been integrated with several schedulability analysis tools and a Qualification Support Kit (QSK) has been developed to demonstrate the tool's suitability for safety-critical software. It has been used to address the problem of different hardware configurations in WCET customers, and to develop Astrée and CompCert, two AbsInt products. It has also been applied to non-timing-predictable architectures, and a worst-case stack usage analysis tool, StackAnalyzer, has been developed as a spin-off.

Astrée has been extended to support code guideline checking, cybersecurity vulnerability scanning, data and control flow analysis, C++, precision and efficiency, and user perspective. An XML converter has been developed for Astrée which automatically generates the appropriate data structures and access functions for the Astrée analysis, and enables a fully automatic integration analysis of AUTOSAR projects. Additionally, the Microarchitectural Analysis, embedded within a complex tool architecture, is the central innovation that made the WCET analysis work and scale.

The Micro-architectural analysis tool developed by D. Kästner et al. for Airbus has been improved by using controlled loop unrolling and adding annotations to the software to provide more information to the tool. It has also been integrated with a model-based design tool to automatically insert annotations and provide approximate timing information on the model level.

Astrée has achieved unprecedented results in proving the absence of any runtime errors in the primary flight control software of the Airbus A340 fly-by-wire system, the electric flight control codes of the A380 series, and the automatic docking software of the Jules Vernes Automated Transfer Vehicle (ATV). It has also been extended to support interleaving semantics and integration analysis, and abstract OS libraries have been developed to support the OSEK/AUTOSAR and ARINC 653 norms.

The paper concludes by noting that the availability of mature development and verification techniques should be taken into account when developing industrial systems, and that an exchange between software and safety communities is essential.
