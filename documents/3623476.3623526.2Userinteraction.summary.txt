

This section presents a novel meta-modeling approach called Cascade, which leverages an explicit representation of change. Cascade is a meta-language for expressing DSLs with input and feedback mechanisms that drive live programming. Cascade expresses “cascading changes” that introduce liveness using bi-directional model transformations with side-effects. The Cascade compiler generates interpreters that integrate with Delta, Cascade’s runtime. Delta offers a built-in Read-Eval-Print-Loop (REPL) for simulating live programming scenarios. When Delta executes events, it generates transactions as cause-and-effect chains. These transactions update a live program’s syntax and run-time state. The section also presents a scenario that motivates the work, hypotheses, and objectives.