

This section discusses a case study of using ElixirST to verify an Elixir (CLI) application which interacts with a third-party service (Duffel). The application is built as an Elixir module, FlightSystem, which consists of a client and a gateway process. The client interacts with the Duffel Flight Server, and the protocol of calls that need to be invoked in the correct order is formalised in the S client protocol. The client can request to book flights from the Duffel Server, and the interaction starts with the client making a request to get the available flights. The client then starts receiving and rejecting one offer at a time, until the client decides to take up an offer. To learn more about the flight offer, the client sends a request to get more details and awaits the results. Once the details are received, the client can decide to either cancel the order or book the flight. The behaviour formalised by S client is applied in the module FlightSystem, which is shown partly in Listing 5. ElixirST ensures that the function client/6 follows the pattern described by S client which mirrors the implicit order of API requests by Duffel. In addition to verifying statically the individual functions, by explicitly adding information about the interactions, the source code provides a source of documentation. The section also discusses existing techniques, such as synthesising runtime monitors, which can be used to fix the unverified parts.