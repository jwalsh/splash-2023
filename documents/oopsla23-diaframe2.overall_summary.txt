

This paper discusses the implementation of Diaframe 2.0, a proof automation system for linearizability in separation logic. It introduces two approaches to linearizability, contextual reÔ¨Ånement and logical atomicity, which are available in the Iris framework for separation logic in Coq. It explains how abduction and transformer hints are used to replace a program specification goal with a successive goal, and how type classes in Coq are used to represent these hints. It also explains how logically atomic triples are used to prove weakest preconditions, and how the load-l rule is used to enforce the safety of the load and CAS operations of the left-hand expression. Additionally, it discusses the experiences of verifying the logical atomicity of the Michael-Scott queue using proof automation, and compares the proof automation to interactive refinement proofs in ReLoC. Finally, it provides an overview of the formal rules for contextual refinement, and explains how transformer hints can be combined with abduction hints to support rules in Category 4.
