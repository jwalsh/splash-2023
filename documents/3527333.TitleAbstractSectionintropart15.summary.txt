

This section discusses the correctness of the optimizations of Figure 8, which are proven using the denotational semantics and a calculus reminiscent of the algebra of polynomials. Propositions 7 and 7.6 are presented, which prove the soundness of the vertical loop fusion rules and loop factorization rules, respectively. The remaining optimizations are also proven using operational and denotational arguments, which can be found in the supplementary materials. The SDQL compiler is implemented in Scala and the optimized program is translated into C++. The C++ code generation is mostly straightforward, and the C++ runtime employs an efficient hash table implementation. Finally, the section discusses the semi-ring extensions of SDQL, which can be used for language recognition, reachability, and shortest path problems. Additional transformation rules for language extensions of SDQL are also presented.