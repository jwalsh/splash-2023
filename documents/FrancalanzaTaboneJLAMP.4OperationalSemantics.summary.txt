

This section describes the operational semantics of the Elixir language subset of Figure 3 as a labelled transition system (LTS). It outlines how a handler process within a session executes while interacting with the session client. The transition t α−→ t′ describes the fact that a handler process in state t performs an execution step to transition to the new state t′, while possibly interacting with the client via the action α as a side-effect. The transitions are defined by the term transition rules listed in Figure 8, which include rules for let statements, send statements, receive statements, function calls, case statements, and expressions. The expression reduction rules in Figure 9 are also discussed. These rules are used to reduce the expression which is being matched, and to evaluate a function call by first reducing all of its parameters to a value. The match function is also discussed, which pairs patterns with a corresponding value, resulting in a sequence of substitutions.