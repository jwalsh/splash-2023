

This section discusses the mapping of constructs from Figure 3 to the Elixir language. It explains how the @spec annotation is used to specify the types for the parameters and the return type of the functions, and how the typing rules of Section 3 are designed to minimally alter common coding patterns in the language. It then describes the mechanism used by the implementation to guarantee an interaction between the two processes implementing the respective endpoints of binary session type. This is done by implementing a bespoke spawning function that takes the code of the respective endpoints and returns a tuple with the pids of the two processes that are already linked. Finally, it mentions an improvement that could be made to the system by exploiting Elixirâ€™s ability to cherry-pick messages out-of-order from the queue using pattern matching.