

This section outlines an algorithm for answering forward queries about calls to a function f. The algorithm starts by finding syntactic references to f in the code and following the flow of f forwards from those points. It then issues a query to resolve call targets of the call to process on line 13. Since this is a direct call, the underlying backward data flow analysis resolves the possible call targets to the function process defined on line 8. This also adds a call edge to the call graph and allows the query to make progress by analyzing the body of process to find invocations of its handler argument. The data flow analysis then finds a call to handler in the body of process intraprocedurally, so a call edge is added from that expression to writeToLog. This in turn enables further progress on the query which can proceed backwards from this call to resolve what values flow to variable data. Since getData is invoked as a function, another query needs to be issued to resolve callees of getData. This query makes progress independently based on newly discovered call graph edges, rather than requiring to fully resolve each subquery before continuing with a parent query. The section also discusses the precision of the data flow analysis, using the example of a JavaScript program with heap use. A simple data flow analysis that does not track calling contexts may not distinguish between the objects whose ’func’ property is being assigned to in the body of storeFunc and therefore report both function f() and function g() as potential allocation sites of retrieveFunc(objN). However, if a calling-context-sensitive analysis is used to resolve call expressions to call targets, the query can be resolved to the correct function.