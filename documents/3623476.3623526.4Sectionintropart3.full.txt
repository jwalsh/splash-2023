4. Section intro


(e) Machine Instance

Figure 11. Partial Cascade speci(cid:27)cation of the Mach class

Figure 9. Cascade de(cid:27)nitions of LiveSML’s meta-model

begin

creation modi(cid:27)cations

deletion

end

Figure 10. Object lifeline, events and modi(cid:27)cations

The notation for meta-models resembles object-oriented
programming, as shown in Figure 9. Aside from classes, it
supports the base types String, int, bool, and enum, and the
composite types List, Set and Map. Attribute ownership is
explicit, and by default, a class owns its attributes. The ref
keyword denotes an alias. We omit visibility because the aim
is encapsulating change.

5.2 Actions, events and transformations
Cascade is designed to express run-time transformations
with explicit e(cid:29)ects. As a back-end language, it does not
distinguish between coding actions and user interactions.
Mechanisms for both can be expressed using three kinds
of parameterized event declarations, called effect, trigger
and signal. An e(cid:29)ect describes how a speci(cid:27)c object can
be created, modi(cid:27)ed or deleted. A trigger is an input event
that has no direct e(cid:29)ect, but can schedule other events, side-
e(cid:29)ects that happen afterwards. A signal is an output event
that (cid:30)ags an occurrence such as an exception or an error.

5.2.1 Objects. Objects have a limited life span. Instead of
operating on objects directly, events work on object life-
lines, as shown in Figure 10. The life span of an object begins
before its creation and ends after its deletion. Any number of
changes may happen in between. These life stages are called
issued, bound and retired.

5.2.2 E(cid:29)ects. The basic unit of change, called effect, of-
fers a parameterized abstraction for scripting and reuse. Ef-
fects are bi-directional model transformations whose body
is an edit script. Each e(cid:29)ect has parameters, type-value pairs
separated by commas that determine its scope. Figure 11
shows an example.

5.2.3 Creation. Creation e(cid:29)ects are used to create new
objects of a certain class. For instance, Figure 11 shows a
partial speci(cid:27)cation of the Machine class. We use the REPL
to create a new state machine called “doors” as shown in

var m; ←↪
Mach.Create(m, "doors"); ←↪

(a) Creating a machine

print m; ←↪
machine doors

Mach.Create([|uuid://5|], "doors") {

[|uuid://5|] = new Mach();
[|uuid://5|].name = null → "doors";
[|uuid://6|] = new Set<State>();
[|uuid://5|].states = null → [|uuid://6|];
[|uuid://7|] = new Set<MachInst>();
[|uuid://5|].instances = null → [|uuid://7|];

}

(b) Obtaining feedback

(c) Generated transaction

Figure 12. Creating state machine from the REPL

Figure 12a. Foreness, we will omit declaring variables
from now on. This command calls the Create e(cid:29)ect (lines 6–
13). Note the ←↪ symbol indicates REPL input (pressing the
return key), and its absence indicates output the interpreter
gives in response. We verify the results by reading the output
from the REPL in Figure 12b. The interpeter also generates
the changes that have occurred. The transaction shown in
Figure 12c is a short-hand for encapsulated edit operations.

5.2.4 Subject. The (cid:27)rst parameter of an e(cid:29)ect, called sub-
ject, is always a reference to the object that is subject to
change. The subject can optionally be preceded by an addi-
tional keyword that provides guarantees about its life before
and after execution. The future keyword, used only in cre-
ations, denotes the subject must be issued and will be bound
afterwards. The past keyword, used only in deletions de-
notes a bound subject will be retired afterwards. The lack of
a keyword signi(cid:27)es it will continue to exist.

5.2.5 Parameters. There are two kinds of additional pa-
rameters that may follow the subject in the signature. Con-
stant parameters are inputs that enable passing values such
as an int, bool, String, enum or object reference. Change pa-
rameters enable updating the value of an object (cid:27)eld from
an old to a new value. In Figure 11, both parameters of the
Create e(cid:29)ect (lines 6–7) are constant parameters. The Delete
e(cid:29)ect (line 15) also has a change parameter. It indicates trans-
actions will store the old and the new value of name (cid:27)eld.

5.3 Side-e(cid:29)ects and causal tranformations
5.3.1 Side-e(cid:29)ects. The pre and post clauses enable sched-
uling e(cid:29)ects before and after an event. Side e(cid:29)ects can be
used to create modular constructors and destructors that
keep the syntax and the run-time states consistent. The post
clause enables creating additional objects, booting up sys-
tems and de(cid:27)ning e(cid:29)ects of user interaction. These clauses

153


SLE ’23, October 23– 2023, Cascais, Portugalcan contain if-statements and while read values
and, but cannot modify values directly. Triggers only have a post-. Signals have noe(cid:29)ects.

History


head

Juncture

– previous: Juncture
– next: List<Juncture>

event

Riemer van Rozen

Event

– language: ILanguage
– loc: Location
– cause: Event
–(cid:27)ect: List<Event>
– postE(cid:27)ect: List<Event>

5.3.2 Begin statement. For weaving side-e(cid:29)ects together,
the begin and end statements issue objects references and re-
voke their validity. For instance, “begin State s;” is a state-
ment that issues a new reference to a State object. Afterwards,
we can schedule its creation.

5.3.3 Deletion. By design, every object that can be cre-
ated can also be deleted. Unlike creations, which work on
“blanks slates”, deletions must account for ownership and con-
sistency. The pre clause enables performing clean up tasks
such as deleting owned data, removing aliases, and shutting
down entire systems. For instance, calling Mach.Delete(m)
from the REPL does not only delete a machine, but also
cleans up the every state and any running instance it owns,
as de(cid:27)ned by the pre-clause on lines 20–25 of Figure 11. We
demonstrate how LiveSML handles deletion in Section 7.

5.3.4 Inverse. Inverse e(cid:29)ects, indicated by the inverse
keyword, perform conceptually opposite operations to their
preceding e(cid:29)ects. E(cid:29)ects and their inverses must have com-
patible signatures. Create and Delete in Figure 11 are in-
verse e(cid:29)ects. Create’s future subject and constant param-
eters match Delete’s past subject and change parameters.
At run time, an inversion entails creating an opposite ef-
fect that can roll back a transaction, undoing its e(cid:29