Title-Abstract. Section intro
 the same thing as
multiplying the linear form component-wise to its coefficients. One could think
this reduction could hide potential errors when the multiplication is performed

with0. However, this is not possible because evaluation of linear forms does not

trigger errors. Also, when a linear form is multiplied by a convex join expression,
the multiplication is distributed over the operands of the convex join. In such
case, it is possible to reduce both the new products and the resulting abstract
expression in order to simplify them. Those reductions are formalized in the two


24

J. Boillot, J. Feret.

following inference rules. If neither of the two can be applied, no reduction is
performed.

𝑒♯𝑖=ℒ□(𝑎0+∑𝑋𝑖∈𝒱𝑎𝑖𝑋𝑖)
𝑒♯𝑗=ℒ□(𝑏0)
𝑖,𝑗∈{1,2}∶𝑖≠𝑗
reduce0(𝑒♯1⊠𝑒♯2)𝑅♯≝ℒ□((𝑎0×𝑏0)+∑𝑋𝑖∈𝒱(���×𝑏0)𝑋𝑖)
𝑖,𝑗∈{1,2}∶𝑖≠𝑗
𝑒♯𝑗=ℒ□(𝛼0+∑𝑋𝑖∈𝒱𝑎𝑖𝑋𝑖)
𝑒♯𝑖=𝑒♯𝑖,1⋓□𝑒♯𝑖,2
𝑒′♯1≝ reduce0(𝑒♯𝑖,1⊠𝑒♯𝑗)𝑅♯
𝑒′♯2≝ reduce0(𝑒♯𝑖,2⊠𝑒♯𝑗)𝑅♯
reduce0(𝑒♯1⊠𝑒♯2)𝑅♯ reduce0(𝑒′♯1 ⋓□𝑒′♯2)𝑅♯

MultConst

MultConvexJoin

Division. The only rule introduced for specific reduction of abstract division
expressions is the division of a linear form by a nonzero constant that divides all
the coefficients of the linear form. In such a case, the resulting linear form is the
original one divided component-wise by the coefficient. Like for the reduction
rules of multiplication expressions, no errors can be hidden during this process
because evaluation of linear forms does not trigger errors. If it cannot be applied,
no reduction is performed.

𝑒♯2=ℒ□(𝑏0)

𝑒♯1=ℒ□((𝑎0×𝑏0)+∑𝑋𝑖∈𝒱(𝑎𝑖×𝑏0)𝑋𝑖)

𝑏≠0
reduce0(𝑒♯1⧄𝑒♯2)𝑅♯≝ℒ□(𝑎0+∑𝑋𝑖∈𝒱𝑎𝑖𝑋𝑖)

DivConst

Convex Join. The convex join operator an idempotent, associative,
and commutative operator. This can be exploited in the three following rules. If
none of the three can be applied, no reduction is performed.

ConvexJoinIdem1

𝑒♯1=��2
reduce0(𝑒♯1⋓□𝑒♯2)𝑅♯≝𝑒♯1
𝑒♯𝑖=𝑒♯𝑖,1⋓□𝑒♯𝑖,2
reduce0(𝑒♯1⋓□��2��♯≝𝑒♯𝑖
𝑒♯1=𝑒♯1,1⋓□𝑒�,2

𝑖,𝑗∈{1,2}∶𝑖≠𝑗
𝑒♯𝑗=��𝑖,1∨𝑒♯𝑗=𝑒♯𝑖,2
𝑒♯1≠𝑒♯2
𝑒♯2=𝑒♯2,1⋓□𝑒♯2,2
𝑒♯1,𝑖=𝑒♯2,1∨𝑒♯1,𝑖=𝑒♯2,2
𝑖,𝑗∈{1,2}∶𝑖≠𝑗
reduce0(𝑒♯1⋓□𝑒♯2)𝑅♯≝ reduce0(𝑒♯1,𝑗⋓□𝑒♯2)𝑅♯

ConvexJoinIdem2

ConvexJoinIdem3


Symbolic transformation of expressions in modular arithmetic

25

1
2
3
4
5
6

unsigned int x, a;
int16_t b;
if (a <= x && x-a <= 256 && b >= 0) {

int16_t r = ((x - a) * b) >> 8;
assert(0 <= r && r <= b);

}

1
2
3
4
5
6
7
8

if𝑋+−𝐴≥0 then
if𝑋+−𝐴≤28 then
if𝐵≥0 then
𝑅←((𝑋+−𝐴)×𝐵)∕28⨾
//0≤𝑅≤𝐵

endif

endif

endif

(a) C language
Fig. 10: Second example of linear interpolation computation.

(b) Article’s language (simplified)

Default rule. As described earlier, if no other can be applied, the
abstract expression is returned unmodified. This is formalized in the following
inference rule that has no premises.

No

The soundness of the reduction rules of reduce0 is stated in the following
Theorem 5. The reduce0 operator we introduced is a reduce operator as de-

theorem.

reduce0(𝑒♯)𝑅♯≝𝑒♯

scribed in Def. 5.8.

7.3 Linear Interpolation

One advantage of handling abstract expressions in the reduce function is that
they are potentially simpler than the original expressions (e.g., without modulo
computations). Moreover, this function is applied during several stages of the
reduction. Thus, it is possible to introduce new reduction rules that try to match
patterns in order to simplify the matched abstract expressions.

We illustrate this method