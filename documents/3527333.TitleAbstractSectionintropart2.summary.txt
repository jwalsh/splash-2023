

This section introduces SDQL, a purely functional language that is simple, canonical, efficient, and expressive enough for hybrid database (DB) and linear algebra (LA) workloads. SDQL presents data as dictionaries over semi-rings, which subsume collection types such as sets, multisets, arrays, and tensors. SDQL unifies optimizations with inherent similarities that are otherwise developed in isolation, such as pushing aggregates past joins and matrix chain ordering. The paper also introduces a kind/type system of SDQL that keeps track of the semi-ring structure, and provides a unified formal model that allows tighter integration of data science pipelines. Furthermore, SDQL unifies alternative representations for relations and tensors, and provides denotational semantics using 0-preserving functions between K-semi-modules. Finally, the paper presents a prototype compiler and runtime for SDQL, and shows experimentally that SDQL can be competitive with or outperforms a host of systems that are state-of-the-art in their own domain.