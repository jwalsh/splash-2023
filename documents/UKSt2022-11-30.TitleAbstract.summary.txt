

This section provides an overview of the design principles and features of Zag Smalltalk, a from-scratch implementation of Smalltalk. It is low-level implemented in Zig and its goal is to support existing OpenSmalltalk systems. It has 64-bit immediates, including double FP, 51-bit SmallInteger, true, false, nil, Symbols, Unicode chars, and heap-object reference. It also has multi-core support, with computational/mutator threads typically 1 per core and I/O threads one per open I/O port. It has a global collector thread for non-moving mark/sweep arena and a linked-freelist heap for large objects. It also has a unified dispatch, single level of hashing for method dispatch, and high performance inlining. Code generation is done through threaded-execution, JIT, and stand-alone generator. Memory management is also discussed, including heap objects, global collector, and context. Results of running 40 fibonacci are also provided. Conclusions are made about the performance of Zag Smalltalk and its potential applications.